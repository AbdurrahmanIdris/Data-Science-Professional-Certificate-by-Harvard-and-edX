?seq
second = (-b-sqrt(b^2-4*a*c))/(2*a)
a <- 2
b <- -1
c <- -4
first = (-b+sqrt(b^2-4*a*c))/(2*a)
second = (-b-sqrt(b^2-4*a*c))/(2*a)
source('~/.active-rstudio-document', echo=TRUE)
a <- 2
b <- -1
c <- -4
first = (-b+sqrt(b^2-(4*a*c)))/(2*a)
second = (-b-sqrt(b^2-(4*a*c)))/(2*a)
a <- 2
b <- -1
c <- -4
first = (-b+sqrt(b^2-(4*a*c)))/(2*a)
second = (-b-sqrt(b^2-(4*a*c)))/(2*a)
first
second
log4(1024)
log(1024,4)
install.packages("dslabs")
library(dslabs)
data("movielens")
data(movielens)
str(movielens)
lev <- movielens$genres
nlevels(lev)
time <- time/60
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
time
speed
name[which.max(speed)]
library(dslabs)
data("heights")
prop.table(table(heights))
summary(heights$height)
p <- seq(0.01,0.99,0.01)
quantile(heights$height,p)
qnorm(p, 69, 3)
p <- seq(0.05, 0.95, 0.05)
sample_quantiles <- quantile(heights$height,p)
theoretical_quantiles <- qnorm(p, mean(heights$height), sd(heights$height))
qplot(theoretical_quantiles, sample_quantiles) + geom_abline()
library(tidyverse)
library(dplyr)
qplot(theoretical_quantiles, sample_quantiles) + geom_abline()
install.packages(ggplot2)
install.packages("ggplot2")
library(ggplot2)
qplot(theoretical_quantiles, sample_quantiles) + geom_abline()
source('E:/Faculty Of Engineering/Online courses/edX/Data Science Professional Certificate - Harvard/2 - Visualization/Using ggplot.R', echo=TRUE)
source('E:/Faculty Of Engineering/Online courses/edX/Data Science Professional Certificate - Harvard/2 - Visualization/Using ggplot.R', echo=TRUE)
source('E:/Faculty Of Engineering/Online courses/edX/Data Science Professional Certificate - Harvard/2 - Visualization/Using ggplot.R', echo=TRUE)
source('E:/Faculty Of Engineering/Online courses/edX/Data Science Professional Certificate - Harvard/2 - Visualization/Using ggplot.R', echo=TRUE)
source('E:/Faculty Of Engineering/Online courses/edX/Data Science Professional Certificate - Harvard/2 - Visualization/Using ggplot.R', echo=TRUE)
source('E:/Faculty Of Engineering/Online courses/edX/Data Science Professional Certificate - Harvard/2 - Visualization/Using ggplot.R', echo=TRUE)
install.packages("ggthemes")
source('E:/Faculty Of Engineering/Online courses/edX/Data Science Professional Certificate - Harvard/2 - Visualization/Using ggplot.R', echo=TRUE)
install.packages("ggrepel")
source('E:/Faculty Of Engineering/Online courses/edX/Data Science Professional Certificate - Harvard/2 - Visualization/Using ggplot.R', echo=TRUE)
source('E:/Faculty Of Engineering/Online courses/edX/Data Science Professional Certificate - Harvard/2 - Visualization/Other examples using ggplot.R', echo=TRUE)
install.packages("gridExtra")
source('E:/Faculty Of Engineering/Online courses/edX/Data Science Professional Certificate - Harvard/2 - Visualization/Other examples using ggplot.R', echo=TRUE)
source('E:/Faculty Of Engineering/Online courses/edX/Data Science Professional Certificate - Harvard/2 - Visualization/Other examples using ggplot.R', echo=TRUE)
source('E:/Faculty Of Engineering/Online courses/edX/Data Science Professional Certificate - Harvard/2 - Visualization/Other examples using ggplot.R', echo=TRUE)
?aes
setwd("E:/Faculty Of Engineering/Online courses/edX/Data Science Professional Certificate - Harvard/2 - Visualization")
source('E:/Faculty Of Engineering/Online courses/edX/Data Science Professional Certificate - Harvard/2 - Visualization/5.3 Data Visualization principles - Vaccines.R', echo=TRUE)
install.packages("dbplyr")
source('E:/Faculty Of Engineering/Online courses/edX/Data Science Professional Certificate - Harvard/2 - Visualization/5.3 Data Visualization principles - Vaccines.R', echo=TRUE)
source('E:/Faculty Of Engineering/Online courses/edX/Data Science Professional Certificate - Harvard/2 - Visualization/5.3 Data Visualization principles - Vaccines.R', echo=TRUE)
source('E:/Faculty Of Engineering/Online courses/edX/Data Science Professional Certificate - Harvard/2 - Visualization/5.3 Data Visualization principles - Vaccines.R', echo=TRUE)
str(us_contagious_diseases)
head(us_contagious_diseases)
# assign dat to the per 10,000 rate of measles, removing Alaska and Hawaii and adjusting for weeks reporting
the_disease <- "Measles"
dat <- us_contagious_diseases %>%
filter(!state %in% c("Alaska","Hawaii") & disease == the_disease) %>%
mutate(rate = count / population * 10000 * 52/weeks_reporting) %>%
mutate(state = reorder(state,rate))
# plot disease rates per year in California
dat %>% filter(state == "California" & !is.na(rate)) %>%
ggplot(aes(year,rate))+
geom_line()+
ylab("Cases per 10,000")+
geom_vline(xintercept = 1963, col = "blue")
# plot disease rates per year in California
dat %>% filter(state == "California" & !is.na(rate)) %>%
ggplot(aes(year,rate))+
geom_point()+
ylab("Cases per 10,000")+
geom_vline(xintercept = 1963, col = "blue")
# plot disease rates per year in California
dat %>% filter(state == "California" & !is.na(rate)) %>%
ggplot(aes(year,rate))+
geom_point()+
ylab("Cases per 10,000")+
geom_vline(xintercept = 1963, col = "blue")
# plot disease rates per year in California
dat %>% filter(state == "California" & !is.na(rate)) %>%
ggplot(aes(year,rate))+
geom_line()+
ylab("Cases per 10,000")+
geom_vline(xintercept = 1963, col = "blue")
#tile plot of disease rate by state and year
dat %>% ggplot(aes(year, state, fill(rate)))+
geom_tile(color = "grey50")+
scale_x_continuous(expand = c(0,0))+
scale_fill_gradientn(colors =  RColorBrewer::brewer.pal(9,"Reds"),trans = "sqrt")+
geom_vline(xintercept = 1963, col= "blue")+
theme_minimal() + theme(panel.grid = element_blank()) +
ggtitle(the_disease) +
ylab("") +
xlab("")
#tile plot of disease rate by state and year
dat %>% ggplot(aes(year, state, fill(rate)))+
geom_tile(color = "grey50")+
scale_x_continuous(expand = c(0,0))+
scale_fill_gradientn(colors = RColorBrewer::brewer.pal(9, "Reds"), trans = "sqrt")+
geom_vline(xintercept = 1963, col= "blue")+
theme_minimal() + theme(panel.grid = element_blank()) +
ggtitle(the_disease) +
ylab("") +
xlab("")
#tile plot of disease rate by state and year
dat %>% ggplot(aes(year, state, fill(rate)))+
geom_tile(color = "grey50")+
scale_x_continuous(expand = c(0,0))+
scale_fill_gradientn(colors = RColorBrewer::brewer.pal(9, "reds"), trans = "sqrt")+
geom_vline(xintercept = 1963, col= "blue")+
theme_minimal() + theme(panel.grid = element_blank()) +
ggtitle(the_disease) +
ylab("") +
xlab("")
#tile plot of disease rate by state and year
dat %>% ggplot(aes(year, state, fill=rate)) +
geom_tile(color = "grey50") +
scale_x_continuous(expand = c(0,0)) +
scale_fill_gradientn(colors = RColorBrewer::brewer.pal(9, "Reds"), trans = "sqrt") +
geom_vline(xintercept = 1963, col = "blue") +
theme_minimal() + theme(panel.grid = element_blank()) +
ggtitle(the_disease) +
ylab("") +
xlab("")
#tile plot of disease rate by state and year
dat %>% ggplot(aes(year, state, fill=rate))+
geom_tile(color = "grey50")+
scale_x_continuous(expand = c(0,0))+
scale_fill_gradientn(colors = RColorBrewer::brewer.pal(9, "Reds"), trans = "sqrt")+
geom_vline(xintercept = 1963, col= "blue")+
theme_minimal() + theme(panel.grid = element_blank()) +
ggtitle(the_disease) +
ylab("") +
xlab("")
############Code: Line plot of measles rate by year and state
avg <- us_contagious_diseases %>%
filter(disease == the_disease) %>% group_by(year)%>%
summarise(us_rate = sum(count, na.rm = TRUE) / sum(population, na.rm = TRUE)*10000)
# make line plot of measles rate by year by state
dat %>%
filter(!is.na(rate)) %>%
ggplot() +
geom_line(aes(year, rate, group = state), color = "grey50",
show.legend = FALSE, alpha = 0.2, size = 1) +
geom_line(mapping = aes(year, us_rate), data = avg, size = 1, col = "black") +
scale_y_continuous(trans = "sqrt", breaks = c(5, 25, 125, 300)) +
ggtitle("Cases per 10,000 by state") +
xlab("") +
ylab("") +
geom_text(data = data.frame(x = 1955, y = 50),
mapping = aes(x, y, label = "US average"), color = "black") +
geom_vline(xintercept = 1963, col = "blue")
clear
clc
install.packages("titanic")
head(titanic_train)
source('E:/Faculty Of Engineering/Online courses/edX/Data Science Professional Certificate - Harvard/2 - Visualization/Titanic Survival Exercises - Assignment 11.R', echo=TRUE)
names(titanic)
head(titanic)
?titanic_train
head(titanic_train)
levels(titanic_train$Survived)
str(titanic_train)
levels(as.factor(titanic_train$Pclass))
levels(as.factor(titanic_train$Survived))
levels(as.factor(titanic_train$SibSp))
levels(as.factor(titanic_train$Parch))
levels(as.factor(titanic_train$Fare))
?facet_grid
source('E:/Faculty Of Engineering/Online courses/edX/Data Science Professional Certificate - Harvard/2 - Visualization/Titanic Survival Exercises - Assignment 11.R', echo=TRUE)
source('E:/Faculty Of Engineering/Online courses/edX/Data Science Professional Certificate - Harvard/2 - Visualization/Titanic Survival Exercises - Assignment 11.R', echo=TRUE)
source('E:/Faculty Of Engineering/Online courses/edX/Data Science Professional Certificate - Harvard/2 - Visualization/Titanic Survival Exercises - Assignment 11.R', echo=TRUE)
source('E:/Faculty Of Engineering/Online courses/edX/Data Science Professional Certificate - Harvard/2 - Visualization/Titanic Survival Exercises - Assignment 11.R', echo=TRUE)
source('E:/Faculty Of Engineering/Online courses/edX/Data Science Professional Certificate - Harvard/2 - Visualization/Titanic Survival Exercises - Assignment 11.R', echo=TRUE)
source('E:/Faculty Of Engineering/Online courses/edX/Data Science Professional Certificate - Harvard/2 - Visualization/Titanic Survival Exercises - Assignment 11.R', echo=TRUE)
source('E:/Faculty Of Engineering/Online courses/edX/Data Science Professional Certificate - Harvard/2 - Visualization/Titanic Survival Exercises - Assignment 11.R', echo=TRUE)
?geom_density
source('E:/Faculty Of Engineering/Online courses/edX/Data Science Professional Certificate - Harvard/2 - Visualization/Titanic Survival Exercises - Assignment 11.R', echo=TRUE)
source('E:/Faculty Of Engineering/Online courses/edX/Data Science Professional Certificate - Harvard/2 - Visualization/Titanic Survival Exercises - Assignment 11.R', echo=TRUE)
source('E:/Faculty Of Engineering/Online courses/edX/Data Science Professional Certificate - Harvard/2 - Visualization/Titanic Survival Exercises - Assignment 11.R', echo=TRUE)
source('E:/Faculty Of Engineering/Online courses/edX/Data Science Professional Certificate - Harvard/2 - Visualization/Titanic Survival Exercises - Assignment 11.R', echo=TRUE)
levels(titanic$Sex)
titanic %>% filter(Sex == "female")
?table
table(titanic, titanic$Sex == "female")
table(titanic$Sex)
titanic%>%
filter(Sex = "female" & Age == 40)%>%
table()
titanic%>%
filter(Sex == "female" & Age == 40)%>%
table()
titanic%>%
filter(Sex == "female" & Age == 40)%>%
table(Sex)
titanic%>%
filter(Sex == "female" & Age == 40)%>%
table(titanic$Sex)
table(titanic$Sex)
table(titanic$Sex, exclude != 40)
forty <- titanic%>%
filter(Age == 40)
table(forty$Sex)
men_between_ages <- titanic %>%
filter(Sex == "male" & 18 <= Age <= 35)
men_between_ages <- titanic %>%
filter(Sex == "male" & 18 <= Age & Age <= 35)
length(men_between_ages)
men_between_ages <- titanic %>%
filter(Sex == "male" & Age >= 18 & Age <= 35)
length(men_between_ages)
females_bet_ages <- titanic%>%
filter(Sex == "female" & Age >= 18 & Age <= 35)
length(females_bet_ages)
males <- titanic%>%
filter(Sex == "male")
females <- titanic%>%
filter(Sex == "female")
length(men_between_ages) / length(males)
males
men_between_ages
length(men_between_ages)
nrow(men_between_ages)
nrow(males)
251/577
nrow(females_bet_ages)
nrow(females)
133/314
nrow(males[Age < 17])
nrow(males[males$Age < 17])
seventeen_m <- titanic%>%
filter(Age < 17)
seventeen_m
seventeen_m <- titanic%>%
filter(Age < 17 & Sex == "male")
seventeen_m
source('E:/Faculty Of Engineering/Online courses/edX/Data Science Professional Certificate - Harvard/2 - Visualization/Titanic Survival Exercises - Assignment 11.R', echo=TRUE)
source('E:/Faculty Of Engineering/Online courses/edX/Data Science Professional Certificate - Harvard/2 - Visualization/Titanic Survival Exercises - Assignment 11.R', echo=TRUE)
source('E:/Faculty Of Engineering/Online courses/edX/Data Science Professional Certificate - Harvard/2 - Visualization/Titanic Survival Exercises - Assignment 11.R', echo=TRUE)
source('E:/Faculty Of Engineering/Online courses/edX/Data Science Professional Certificate - Harvard/2 - Visualization/Titanic Survival Exercises - Assignment 11.R', echo=TRUE)
source('E:/Faculty Of Engineering/Online courses/edX/Data Science Professional Certificate - Harvard/2 - Visualization/Titanic Survival Exercises - Assignment 11.R', echo=TRUE)
source('E:/Faculty Of Engineering/Online courses/edX/Data Science Professional Certificate - Harvard/2 - Visualization/Titanic Survival Exercises - Assignment 11.R', echo=TRUE)
source('E:/Faculty Of Engineering/Online courses/edX/Data Science Professional Certificate - Harvard/2 - Visualization/Titanic Survival Exercises - Assignment 11.R', echo=TRUE)
source('E:/Faculty Of Engineering/Online courses/edX/Data Science Professional Certificate - Harvard/2 - Visualization/Titanic Survival Exercises - Assignment 11.R', echo=TRUE)
source('E:/Faculty Of Engineering/Online courses/edX/Data Science Professional Certificate - Harvard/2 - Visualization/Titanic Survival Exercises - Assignment 11.R', echo=TRUE)
params <- titanic %>%
filter(!is.na(Age)) %>%
summarize(mean = mean(Age), sd = sd(Age))
params
x <- titanic$Age
x
x <- titanic$Sex%>%
filter(!is.na(Age))
x <- titanic$Age%>%
filter(!is.na(Age))
no_na_age <- titanic%>%
filter(!is.na(Age))
no_na_age
params
params$mean
params <- titanic %>%
filter(!is.na(Age)) %>%
summarize(mean = mean(Age), sd = sd(Age))
no_na_age <- titanic%>%
filter(!is.na(Age))
x <- no_na_age$Sex
p <- seq(0.05, 0.95, 0.05)
sample_quantiles <- quantile(x,p)
theoretical_quantiles <- qnorm(p, params$mean, params$sd)
qplot(theoretical_quantiles, sample_quantiles) + geom_abline()
x
x <- no_na_age$Age
x
x <- no_na_age$Age
p <- seq(0.05, 0.95, 0.05)
sample_quantiles <- quantile(x,p)
theoretical_quantiles <- qnorm(p, params$mean, params$sd)
qplot(theoretical_quantiles, sample_quantiles) + geom_abline()
max(x)
source('E:/Faculty Of Engineering/Online courses/edX/Data Science Professional Certificate - Harvard/2 - Visualization/Titanic Survival Exercises - Assignment 11.R', echo=TRUE)
params <- titanic %>%
filter(!is.na(Age)) %>%
summarize(mean = mean(Age), sd = sd(Age))
titanic%>%
filter(!is.na(Age))%>%
ggplot(aes(Age))+
geom_qq(dparams = params) + geom_abline()
params <- titanic %>%
filter(!is.na(Age)) %>%
summarize(mean = mean(Age), sd = sd(Age))
titanic%>%
filter(!is.na(Age))%>%
ggplot(aes(sample = Age))+
geom_qq(dparams = params) + geom_abline()
titanic%>%
ggplot(aes(Survived,Sex))+
geom_bar()
titanic%>%
ggplot(aes(Sex, fill = Survived))+
geom_bar()
titanic%>%
ggplot(aes(Sex, fill = Survived))+
geom_bar()
titanic%>%
ggplot(aes(Survived, fill = Sex))+
geom_bar()
titanic%>%
ggplot(aes(Survived, fill = Sex))+
geom_bar(position = position_dodge())
titanic%>%
ggplot(aes(Survived, fill = Sex))+
geom_bar()
titanic%>%
ggplot(aes(Sex, fill = Survived))+
geom_bar()
titanic %>%
filter(!is.na(Age) & !is.na(Survived))%>%
ggplot(aes(Age, fill = Survived))+
geom_density(alpha = 0.2, bw = 2, position = "stack")+
titanic %>%
filter(!is.na(Age) & !is.na(Survived))%>%
ggplot(aes(Age, fill = Survived))+
geom_density(alpha = 0.2, bw = 2, position = "stack")
titanic %>%
filter(!is.na(Age) & !is.na(Survived))%>%
ggplot(aes(Age, fill = Survived))+
geom_density(alpha = 0.2, bw = 2, position = "stack")
titanic %>%
filter(!is.na(Age) & !is.na(Survived))%>%
ggplot(aes(Age, y = ..count.., fill = Survived))+
geom_density(alpha = 0.2, bw = 2, position = "stack")
titanic %>%
filter(!is.na(Age) & !is.na(Survived))%>%
ggplot(aes(Age, y = ..count.., fill = Survived))+
geom_density(alpha = 1, bw = 2, position = "stack")
titanic %>%
filter(!is.na(Age) & !is.na(Survived))%>%
ggplot(aes(Age, y = ..count.., fill = Survived))+
geom_density(alpha = 0.2, bw = 0.75, position = "stack")
titanic %>%
filter(!is.na(Age) & !is.na(Survived))%>%
ggplot(aes(Age, y = ..count.., fill = Survived))+
geom_density(alpha = 0.2,  position = "stack")
titanic %>%
filter(!is.na(Age) & !is.na(Survived))%>%
ggplot(aes(Age, y = ..count.., fill = Survived))+
geom_density(alpha = 0.2, bw = 0.5, position = "stack")
titanic %>%
filter(!is.na(Age) & !is.na(Survived))%>%
ggplot(aes(Age, y = ..count.., fill = Survived))+
geom_density(alpha = 0.2, bw = 0.5)
#Question Number 5
titanic %>%
filter(!is.na(Age) & !is.na(Survived))%>%
ggplot(aes(Age, y = ..count.., fill = Survived))+
geom_density(alpha = 0.2, bw = 0.8)
#Question Number 6 -> Survival by fare
titanic %>%
filter(Fare != 0)%>%
ggplot(aes(Fare, group_by(Survived)))+
geom_boxplot()
titanic %>%
filter(Fare != 0)%>%
group_by(Survived)%>%
ggplot(aes(Fare))+
geom_boxplot()
titanic %>%
filter(Fare != 0)%>%
group_by(Survived)%>%
ggplot(aes(Fare))+
geom_boxplot()+
scale_x_continuous(trans = "log2")
titanic %>%
filter(Fare != 0)%>%
ggplot(aes(Fare,Survived))+
geom_boxplot()+
scale_x_continuous(trans = "log2")
titanic %>%
filter(Fare != 0)%>%
ggplot(aes(Fare,Survived))+
geom_boxplot()
titanic %>%
filter(Fare != 0)%>%
ggplot(aes(Fare,Survived))+
geom_boxplot()+
geom_jitter(width = 0.1, alpha= 0.2)
scale_x_continuous(trans = "log2")
titanic %>%
filter(Fare != 0)%>%
ggplot(aes(Fare,Survived))+
geom_boxplot()+
geom_jitter(width = 0.1, alpha= 0.2)
#Question Number 6 -> Survival by fare
titanic %>%
filter(Fare != 0)%>%
ggplot(aes(Fare,Survived))+
geom_boxplot()+
geom_jitter(width = 0.1, alpha= 0.2)+
scale_x_continuous(trans = "log2")
#Question Number 6
titanic%>%
ggplot(aes(Pclass, fill = Survived))+
geom_bar()
titanic%>%
ggplot(aes(Pclass, fill = Survived))+
geom_bar(position = position_fill())
titanic%>%
ggplot(aes(Survived, fill = Pclass))+
geom_bar(position = position_fill())
?facet_grid
titanic %>%
filter(!is.na(Age))%>%
ggplot(aes(Age, y = ..count.., fill = Survived))+
geom_density(alpha = 0.2, bw = 0.8)+
facet_grid(.~vars(Sex,Pclass))
##Question Number 8 -> Survival by Age, Sex and Passenger Class
titanic %>%
filter(!is.na(Age))%>%
ggplot(aes(Age, y = ..count.., fill = Survived))+
geom_density(alpha = 0.2, bw = 0.8)+
facet_grid(rows = vars(Sex,Pclass))
