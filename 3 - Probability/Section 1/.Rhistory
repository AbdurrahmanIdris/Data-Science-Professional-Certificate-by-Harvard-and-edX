?seq
second = (-b-sqrt(b^2-4*a*c))/(2*a)
a <- 2
b <- -1
c <- -4
first = (-b+sqrt(b^2-4*a*c))/(2*a)
second = (-b-sqrt(b^2-4*a*c))/(2*a)
source('~/.active-rstudio-document', echo=TRUE)
a <- 2
b <- -1
c <- -4
first = (-b+sqrt(b^2-(4*a*c)))/(2*a)
second = (-b-sqrt(b^2-(4*a*c)))/(2*a)
a <- 2
b <- -1
c <- -4
first = (-b+sqrt(b^2-(4*a*c)))/(2*a)
second = (-b-sqrt(b^2-(4*a*c)))/(2*a)
first
second
log4(1024)
log(1024,4)
install.packages("dslabs")
library(dslabs)
data("movielens")
data(movielens)
str(movielens)
lev <- movielens$genres
nlevels(lev)
time <- time/60
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
time
speed
name[which.max(speed)]
library(dslabs)
data("heights")
prop.table(table(heights))
summary(heights$height)
p <- seq(0.01,0.99,0.01)
quantile(heights$height,p)
qnorm(p, 69, 3)
p <- seq(0.05, 0.95, 0.05)
sample_quantiles <- quantile(heights$height,p)
theoretical_quantiles <- qnorm(p, mean(heights$height), sd(heights$height))
qplot(theoretical_quantiles, sample_quantiles) + geom_abline()
library(tidyverse)
library(dplyr)
qplot(theoretical_quantiles, sample_quantiles) + geom_abline()
install.packages(ggplot2)
install.packages("ggplot2")
library(ggplot2)
qplot(theoretical_quantiles, sample_quantiles) + geom_abline()
source('E:/Faculty Of Engineering/Online courses/edX/Data Science Professional Certificate - Harvard/2 - Visualization/Using ggplot.R', echo=TRUE)
source('E:/Faculty Of Engineering/Online courses/edX/Data Science Professional Certificate - Harvard/2 - Visualization/Using ggplot.R', echo=TRUE)
source('E:/Faculty Of Engineering/Online courses/edX/Data Science Professional Certificate - Harvard/2 - Visualization/Using ggplot.R', echo=TRUE)
source('E:/Faculty Of Engineering/Online courses/edX/Data Science Professional Certificate - Harvard/2 - Visualization/Using ggplot.R', echo=TRUE)
source('E:/Faculty Of Engineering/Online courses/edX/Data Science Professional Certificate - Harvard/2 - Visualization/Using ggplot.R', echo=TRUE)
source('E:/Faculty Of Engineering/Online courses/edX/Data Science Professional Certificate - Harvard/2 - Visualization/Using ggplot.R', echo=TRUE)
install.packages("ggthemes")
source('E:/Faculty Of Engineering/Online courses/edX/Data Science Professional Certificate - Harvard/2 - Visualization/Using ggplot.R', echo=TRUE)
install.packages("ggrepel")
source('E:/Faculty Of Engineering/Online courses/edX/Data Science Professional Certificate - Harvard/2 - Visualization/Using ggplot.R', echo=TRUE)
source('E:/Faculty Of Engineering/Online courses/edX/Data Science Professional Certificate - Harvard/2 - Visualization/Other examples using ggplot.R', echo=TRUE)
install.packages("gridExtra")
source('E:/Faculty Of Engineering/Online courses/edX/Data Science Professional Certificate - Harvard/2 - Visualization/Other examples using ggplot.R', echo=TRUE)
source('E:/Faculty Of Engineering/Online courses/edX/Data Science Professional Certificate - Harvard/2 - Visualization/Other examples using ggplot.R', echo=TRUE)
source('E:/Faculty Of Engineering/Online courses/edX/Data Science Professional Certificate - Harvard/2 - Visualization/Other examples using ggplot.R', echo=TRUE)
?aes
setwd("E:/Faculty Of Engineering/Online courses/edX/Data Science Professional Certificate - Harvard/3 - Probability")
3^8
source('E:/Faculty Of Engineering/Online courses/edX/Data Science Professional Certificate - Harvard/3 - Probability/section1_assignment1_Olympic running.R', echo=TRUE)
Different_ways
#Question 1
Different_ways <- permutations(3,8)
#Question 1
Different_ways <- permutations(3,8,v=c(1,1,1))
#Question 1
Different_ways <- permutations(3,8,v=c(1,1,1),repeats.allowed = TRUE)
Different_ways <- permutations(8,3)
length(Different_ways)
Different_ways <- permutations(8,3,v=1:8)
length(Different_ways)
Different_ways
?length
Different_ways <- permutations(8,3,v=1:8)
nrow(Different_ways)
Different_ways_jamaica <- permutations(3,3,v=1:3)
nrow(Different_ways_jamaica)
3/8
#Question 3
jamaica_win <- (1/8)*(1/7)*(1/6)
#Question 3
6/336
?all
#Question 4 -> Monte Carlo simulation
runners <- c("Jamaica", "Jamaica", "Jamaica", "USA", "Ecuador", "Netherlands", "France", "South Africa")
B <- 10000
set.seed(1,sample.kind = "Rounding")
prob <- replicate(B,{
event <- sample(runners,3)
all(event == "Jamaica")
})
mean(prob)
entree_comb <- combinations(6,1)
sides_comb <- combinations(6,2)
drink_comb <- combinations(2,1)
meal_combinations <- nrow(entree_comb) * nrow(sides_comb) * nrow(drink_comb)
meal_combinations
entree_comb <- combinations(6,1)
sides_comb <- combinations(6,2)
drink_comb_extended <- combinations(3,1)
meal_combinations_update1 <- nrow(entree_comb) * nrow(sides_comb) * nrow(drink_comb_extended)
meal_combinations_update1
entree_comb <- combinations(6,1)
sides_comb_extended <- combinations(6,3)
drink_comb_extended <- combinations(3,1)
meal_combinations_update2 <- nrow(entree_comb) * nrow(sides_comb_extended) * nrow(drink_comb_extended)
meal_combinations_update2
seq(1:12)
number_of_meals <- function(entree_choices){
entree_comb <- combinations(entree_choices,1)
sides_comb <- combinations(6,2)
drink_comb <- combinations(3,1)
meal_combinations <- nrow(entree_comb) * nrow(sides_comb) * nrow(drink_comb_extended)
meal_combinations
}
entree_range <- seq(1:12)
result <- sapply(entree_range,number_of_meals)
result
result > 365
result[>365]
result[result>365]
expand.grid(entree_range,result)
paste(entree_range,result)
#Question 2e
number_of_sides <- function(sides_choices){
entree_comb <- combinations(6,1)
sides_comb <- combinations(sides_choices,2)
drink_comb <- combinations(3,1)
meal_combinations <- nrow(entree_comb) * nrow(sides_comb) * nrow(drink_comb_extended)
meal_combinations
}
sides_entree_range <- seq(2:12)
result <- sapply(sides_range,number_of_sides)
paste(sides_entree_range,result)
#Question 2e
number_of_sides <- function(sides_choices){
entree_comb <- combinations(6,1)
sides_comb <- combinations(sides_choices,2)
drink_comb <- combinations(3,1)
meal_combinations <- nrow(entree_comb) * nrow(sides_comb) * nrow(drink_comb_extended)
meal_combinations
}
sides_entree_range <- seq(2:12)
result <- sapply(sides_entree_range,number_of_sides)
paste(sides_entree_range,result)
seq(2:12)
seq(2,12,1)
#Question 2e
number_of_sides <- function(sides_choices){
entree_comb <- combinations(6,1)
sides_comb <- combinations(sides_choices,2)
drink_comb <- combinations(3,1)
meal_combinations <- nrow(entree_comb) * nrow(sides_comb) * nrow(drink_comb_extended)
meal_combinations
}
sides_entree_range <- seq(2,12,1)
result <- sapply(sides_entree_range,number_of_sides)
paste(sides_entree_range,result)
source('~/.active-rstudio-document', echo=TRUE)
levels(esoph$agegp)
